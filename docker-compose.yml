version: '3.8'
services:
  api-service:
    build:
      context: ./APIService
      dockerfile: Dockerfile
    networks:
      - db-network
      - api-network
    ports:
      - "8080:8080"
    environment:
      - DATA_SERVICE_BASE_URL=${DATA_SERVICE_BASE_URL}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9093
      - SERVER_PORT=8080
      - KAFKA_NEWS_TOPIC=${KAFKA_NEWS_TOPIC}
      - KAFKA_COMMENT_TOPIC=${KAFKA_COMMENT_TOPIC}
    depends_on:
      - kafka
      - data-service

  data-service:
    build:
      context: ./DataService
      dockerfile: Dockerfile
    container_name: data-service
    networks:
      - db-network
    ports:
      - "8081:8081"
    environment:
      - SERVER_PORT=8081
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9093
      - KAFKA_NEWS_TOPIC=${KAFKA_NEWS_TOPIC}
      - KAFKA_COMMENT_TOPIC=${KAFKA_COMMENT_TOPIC}
      - SPRING_KAFKA_CONSUMER_GROUP_ID=app.1
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_ADDRESS=postgres
    depends_on:
      - kafka
      - postgres

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - db-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: "false"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - db-network

  postgres:
    image: postgres:15.3
    build: ./
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: Newsline
    ports:
      - "5434:5432"
    volumes:
      - ./scripts:/docker-entrypoint-initdb.d
    networks:
      - db-network

networks:
  db-network:
    driver: bridge
    internal: true # Установите внутренний режим для ограничения доступа с хоста
  api-network:
    driver: bridge
